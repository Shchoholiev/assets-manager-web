# Node.js React Web App to Linux on Azure
# Build a Node.js React app with Vite and deploy it to Azure as a Linux web app.

trigger:
  - master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'Azure subscription 1(41a8d72c-b0d9-45ef-b78c-12163a697ed0)'

  # Web app names for dev and prod
  devWebAppName: 'assets-manager-dev'
  prodWebAppName: 'assets-manager'

  # Environment names
  devEnvironmentName: 'assets-manager-dev'
  prodEnvironmentName: 'Production'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js 20.x'

    - script: |
        npm install
        npm run build
      displayName: 'Build React App with Vite'

    # Adding a check to confirm the dist directory exists
    - script: |
        if [ -d "dist" ]; then
          echo "Dist directory exists, proceeding to archive."
        else
          echo "Dist directory does not exist!"
          exit 1
        fi
      displayName: 'Verify Dist Directory'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: 'dist'  # Vite outputs to 'dist' by default
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Publish Artifact'
      artifact: drop

- stage: DeployDev
  displayName: Deploy to Development stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy to Dev Environment
    environment: $(devEnvironmentName)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: $(devWebAppName)'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              WebAppName: $(devWebAppName)
              packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              RuntimeStack: 'NODE|20-lts'
              StartupCommand: 'npx vite --port 8080 --host 0.0.0.0'

- stage: DeployProd
  displayName: Deploy to Production stage
  dependsOn: DeployDev
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy to Prod Environment
    environment: $(prodEnvironmentName)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: $(prodWebAppName)'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              WebAppName: $(prodWebAppName)
              packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              RuntimeStack: 'NODE|20-lts'
              StartupCommand: 'npx vite --port 8080 --host 0.0.0.0'